diff --git a/src/sysc/kernel/sc_process.cpp b/src/sysc/kernel/sc_process.cpp
index bc3c12a..bc0e8c6 100644
--- a/src/sysc/kernel/sc_process.cpp
+++ b/src/sysc/kernel/sc_process.cpp
@@ -48,6 +48,9 @@ namespace sc_core {
 std::vector<sc_event*>  sc_process_handle::empty_event_vector;
 std::vector<sc_object*> sc_process_handle::empty_object_vector;
 sc_event                sc_process_handle::non_event( sc_event::kernel_event );
+trace_fct_t sc_process_b::trace_suspend;
+trace_fct_t sc_process_b::trace_resume;
+
 
 // Last process that was created:
 
diff --git a/src/sysc/kernel/sc_process.h b/src/sysc/kernel/sc_process.h
index aef0839..d0478b1 100644
--- a/src/sysc/kernel/sc_process.h
+++ b/src/sysc/kernel/sc_process.h
@@ -47,6 +47,7 @@ namespace sc_core {
 class sc_process_handle;
 class sc_thread_process;
 class sc_reset;
+class sc_process_b;
 
 SC_API const char* sc_gen_unique_name( const char*, bool preserve_first );
 SC_API  sc_process_handle sc_get_current_process_handle();
@@ -61,6 +62,7 @@ SC_API extern bool sc_allow_process_control_corners; // see sc_simcontext.cpp.
 typedef class sc_cthread_process* sc_cthread_handle;
 typedef class sc_method_process*  sc_method_handle;
 typedef class sc_thread_process*  sc_thread_handle;
+typedef void (*trace_fct_t)(sc_process_b*);
 
 
 // Standard process types:
@@ -457,6 +459,10 @@ class SC_API sc_process_b : public sc_object {
 
   protected:
     static sc_process_b* m_last_created_process_p; // Last process created.
+
+  public:
+    static trace_fct_t trace_suspend;
+    static trace_fct_t trace_resume;
 };
 
 typedef sc_process_b sc_process_b;  // For compatibility.
diff --git a/src/sysc/kernel/sc_thread_process.h b/src/sysc/kernel/sc_thread_process.h
index 2155861..313b05b 100644
--- a/src/sysc/kernel/sc_thread_process.h
+++ b/src/sysc/kernel/sc_thread_process.h
@@ -220,8 +220,14 @@ inline void sc_thread_process::suspend_me()
     if( m_cor_p != cor_p )
     {
         DEBUG_MSG( DEBUG_NAME , this, "suspending thread");
+        if (trace_suspend != nullptr) {
+            trace_suspend(this);
+        }
         simc_p->cor_pkg()->yield( cor_p );
         DEBUG_MSG( DEBUG_NAME , this, "resuming thread");
+        if (trace_resume != nullptr) {
+            trace_resume(this);
+        }
     }
 
     // IF THERE IS A THROW TO BE DONE FOR THIS PROCESS DO IT NOW:
